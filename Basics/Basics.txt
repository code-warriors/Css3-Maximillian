 .container>.item.item-${item - $ }*6    //Shortcut for the VSCODE
<div class="container">
    <div class="item item-1">item - 1 </div>
    <div class="item item-2">item - 2 </div>
    <div class="item item-3">item - 3 </div>
    <div class="item item-4">item - 4 </div>
    <div class="item item-5">item - 5 </div>
    <div class="item item-6">item - 6 </div>
</div>

What is "Specificity" about?
It is all about resolving conflict that rises from multiple CSS rule which target the same element.

What's a "Rule" in CSS?
A combination of selector (WHAT to style) and declaration(HOW to style).


-----------------------DIVING DEEPER INTO CSS ----------------------

percentage always refer to the value given by its parent element.
<section>
    <h1>Pawan bisht</h1>   
                                    h1{
                                        height :100% that means the height provided by the section (parent) to h1(child)
                                    }
</section>

---------------------------IMAGE-----------------------------------

For image it doesnt affected by the height or width selected by the image-container.
coz the outer element is itself a inline element.
so to make img tag to respect the outer container we need to make outer container as 
display : inline-block


-----------------------BOX model ----------------------------

By default height and width are only affects or update the content (not padding, border or margin)
We can't set box-model to margin , we can only do it upto border-box

box-sizing:border-box

Display property

Sometime starting from a new line in code editor coz a new line starting div sarting from a new line 
so ( if we want two adjacent element on the same line) we need to use calc(100% - <existing element> - 5px)
new line chanrater in html takes approx 5px length



 ****     Psuedo classes and Psuedo element  ----> read about them

                    Class               or                       Id
1. Are reusable                                             1. Only used once per percentage
2. Allow you to mark and name things                        2.Also got non-CSS meaning(Linking in simgle page)
          for styling purpose only
3.Most-used selector type                                   3. Use if availabel anyways


        -------    !important  ------------------
        Overwrites "SPECIFICITY"(get high precedence) and all other selectors
        DONT use !important generally

      Psuedo Class vs Psuedo element

      Psuedo Class(:) defines style for special state of an element.
      a:link{
        //When link is not visited yet
      }
      a:visited{
        //When link is visited
      }
      ul li:nth-child(3){} or ul li:first-child{} or ul li:last-child{}

      Psuedo element(::) defines style for Specific part of an element
      p :: before{  content: "this is"}      if p = "paragraph",   then after applying this css
                     it will become   "this isparagraph"
      p :: after{
        content : "this is"            then p = "paragraphthis is"
      }

      h1 :: first-letter{}

        ------------ :not() -------------------
a:not(.active)   
anchor tag that dont have the active classes

            can I Use.com

Box-shadow

float means that u can overwrite the positioning and tell the browser to push an element to the
left or right of the page.


-------------------POSITION----------------
static     ------> default ( all html element having this property as by default)
absolute, relative, fixed, sticky.
top, left, right, bottom these refer to the initial position in the document flow.
viewport simply means is the visible part of your web  or positioning context. 

.parent .child-1{
  top:100px;
}  No affect on styling
Note* All the positioning changes we want to apply right now are only possible if you apply 
a value that is different from static, so different from the default value.

.parent .child-1{
  position: fixed;
}
Let's focus on to the maybe second thing that we can see right here because the element now 
is now basically not existing for the other elements anymore, as we can see it the second 
element, so our background image, that's what it's called element now overtook this position 
the navigation bar element had. We can still see the navigation bar element right here but 
the background image is exactly at the same position and this happens because by applying 
position fixed to this element, to the navigation bar element, we took it out of the actual 
document flow.
This simply means that for all the other elements here, this navigation bar element is no 
longer existing.
Actually we create an inline-block level element whenever we apply "fixed" position.
In this viewPort is the positioning context.The position of the element only depends
upon the viewport.



If two elements having same z-index then the one get preference which is after the first One.
So the latest one overlapped the previous one.

Absolute positioned ----->   containing element
Fixed positioned -------->    view Port

For Absolute positioning element
Well for absolutely positioned elements, the positioning context is defined based on 2 cases.
Case-1 :- If none of the ancestors, so of the parent elements, has a position property 
applied, well then the positioning context of the element is simply the HTML element.

case-2 :- If we have the second case that we have any position ancestors, then the closest ancestor which has the
position property applied is the positioning context for this element.

we know that these are fixed elements,we know that these are taken out of the document flow,
they all have z-index of zero and because of that, the order in the HTML document defines 
the order these are displayed along the z-axis.
Absolute and relative are taking the element out of the document flow.
relative ---------------->   its own current position
      if it go outside the parent element, then we can use overflow: hidden
      but if the parent is body then we should make changes on two places 
      1. At html as overflow : hidden  but in this case we dont see any changes in our styling, coz
                              this is css default behaviour.
      2. At body as overflow : hidden  otherwise we get the unexpected behaviour
sticky    ----------> combination of relative and fixed.
  behave like relative if "position: sticky" but no top, left, right, bottom is apllied.
  behave like fixed if any of the above 4 properties (top, left, bottom, right) are apllied.


Stacking context 
Well basically we aligned all our parent elements along the z-axis,that's what we know
and by adding position fixed to these, each element has its own stacking context.
This means for the elements inside the headline element, the z-index will only have an impact onto the
order of these elements inside the headline element but the general order of the headline element below
contact us, this is defined by the z-index that we apply to the headline element right here.

 --------------------- BACKGROUND ----------------------------

Background-size : property.
In this two main properties are there. 1. Contain 2. cover
1. Contain generally try to make to show the whole image into the container element( and successfull shows it)
   but Sometime left or right whitespace also shown.
2. Cover generally covers the background container element by cropping the image in some fashion but their
    is no whitespace left in container element.
 
 Background-position.
 center: 50% 50%  image cropped 50% left, right, top, bottom.
    background-position : left 10% bottom 20%;
    
  Background-origin:

  Read Also about following properties :-
  background-position, background-attachment, background-size, background-origin  

  background-position : used for clipping the main image. 90% 50%. center(generally used)
  background-attachment:fixed;   //generally used.
  background-size: contain / cover(generally used);
  background-origin: padding-box   // image starts from left edge of padding
                     content-box   // image starts from content element
                     border-box    //image starts from upper left corner of border
  background-clip:                      

The percentage values, you can define how much of the excess space,so of the parts of the 
image that do not make it into the container,how these parts should be distributed.
Now regarding the width, the full image is displayed in the container, it's not 
cropped on either the left or the right, so we can enter whatever we want here for the first 
value,

If we reload,this will actually lead to our image being pushed down because and that's 
something you have to know, the default if you only set one value, is 50%.
So if I set 50 and I reload, we get the exact same result as if we said no second value 
at all. 50% means of the parts of the image that do not fit into the container, so that 
are cropped of, 50% will be cropped at the bottom and 50% will be cropped at the top.
If we set this to 10%, only 10% will be cropped at the top which means that more parts
are cropped at the bottom, so the image is effectively pushed down in its container.
If we set this to 100% on the other hand, all the content that has to be cropped will be cropped at
the top and nothing will be cropped at the bottom,
so this results in the bottom edge of the image being perfectly aligned to the bottom edge of the container
and everything is cropped at the top.

Both the properties are very important.
    Background-position: 90% 50%;
    background-attachment: fixed;

    ------------------------IMAGE TAG ------------------------------------

"img" tag is not following the rules defined by its container element.
Actually it does'nt having effect of percentage on it. But the reason for not following the 
container element width because of inline element behaviour of container element, if we change
the outside container element to inline-block or block etc. it will now follow the outside
container rules like percentage, width etc.



1.  LINEAR GRADIENT   AND RADIAL GRADIENT
2.  

----------------------------UNITS ----------------------------

  UNITS
pixels, px.
percentage, %.
root em, rem.
em, em.
viewport height, vh.
viewport width, vw.


Absolute length ----------> pixels (Mostly ignored user settings )
Viewport length ----------> vh, vw, vmin, vmax ( Adjust to current viewport )
Font-Relative length---------> rem, em Adjust to default font size 
Last 2 are part of % percentage

            3 Grand rules for percentage

1. position : fixed; That whenever we have an element which has the position fixed 
              declaration applied and a percentage unit, well the containing block is the 
              viewport.
2. Position : absolute; So I repeat that, the percentage unit of our element with the 
              position absolute declaration refers to the ancestor's content plus padding 
              having position property applied other then static.
3. Position : static; or Position : relative; The ancestor will be the closest BLOCK 
              level element. 